//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use super::sea_orm_active_enums::TournamentPrivacy;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "tournaments")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub title: String,
    pub description: String,
    pub created_at: DateTimeWithTimeZone,
    pub created_by: String,
    pub scheduled_for: DateTimeWithTimeZone,
    pub started_at: Option<DateTimeWithTimeZone>,
    pub privacy: TournamentPrivacy,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub text_options: Option<Json>,
    pub text_id: Option<i32>,
    pub joined: i32,
    pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::completed_sessions::Entity")]
    CompletedSessions,
    #[sea_orm(
        belongs_to = "super::texts::Entity",
        from = "Column::TextId",
        to = "super::texts::Column::Id",
        on_update = "NoAction",
        on_delete = "SetNull"
    )]
    Texts,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::CreatedBy",
        to = "super::users::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Users,
}

impl Related<super::completed_sessions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CompletedSessions.def()
    }
}

impl Related<super::texts::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Texts.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
